
https://doc.rust-lang.org/rust-by-example/scope/lifetime/explicit.html

================================================================================================================================
                                            Cargo base commands:
================================================================================================================================

▪ Version:
   >  cargo --version

▪ Create a new project
   >  cargo new hello_cargo
   >  cd hello_cargo

▪ Configuration
    in the 'Cargo.toml' file

▪ Build and RUn
   >  cargo build
   >  cargo build --release
   >  cargo run



================================================================================================================================
                                            Questions:
================================================================================================================================

Ownership & Borrowing
Traits & Generics
Error Handling
Multithreading


asynchronous programming (e.g., async/await, tokio, futures).
ryptographic ibraries   (e.g., ring, rustls, libsodium).


================================================================================================================================
                                            Multithreading:
================================================================================================================================

std::thread
std::sync::mpsc::channel

Mutex   : https://doc.rust-lang.org/std/sync/struct.Mutex.html
Once    : https://doc.rust-lang.org/std/sync/struct.Once.html

OnceLock: https://doc.rust-lang.org/std/sync/struct.OnceLock.html
LazyLock: https://doc.rust-lang.org/std/sync/struct.LazyLock.html
RwLock  : https://doc.rust-lang.org/std/sync/struct.RwLock.html

Arc     : https://doc.rust-lang.org/std/sync/struct.Arc.html
Barrier : https://doc.rust-lang.org/std/sync/struct.Barrier.html
Condvar : https://doc.rust-lang.org/std/sync/struct.Condvar.html

mpmc    : https://doc.rust-lang.org/std/sync/mpmc/index.html
mpsc    : https://doc.rust-lang.org/std/sync/mpsc/index.html





================================================================================================================================
                                            TODO:
================================================================================================================================

• Generics


   fn add<T>(i: Т, j: Т) -> Т 
   {
      i + j
   }

   # Фрагмент <Т: std: : ops: : Add<Output = Т>> предписывает, что в т должна быть реализация операции s td: : ops : : Add.

   fn add<T: std::ops::Add<Output = T>>(i: Т, j: Т) -> Т {
   {
      i + j
   }




Check out the fastest moving roles in London, UAE, and remote anywhere in Europe:

 danny@durlstonpartners.com if