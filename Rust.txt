
https://doc.rust-lang.org/rust-by-example/scope/lifetime/explicit.html

================================================================================================================================
                                            Cargo base commands:
================================================================================================================================

▪ Version:
   >  cargo --version

▪ Create a new project
   >  cargo new hello_cargo
   >  cd hello_cargo

▪ Configuration
    in the 'Cargo.toml' file

▪ Build and RUn
   >  cargo build
   >  cargo build --release
   >  cargo run



================================================================================================================================
                                            Questions:
================================================================================================================================

• Ownership & Borrowing
• Traits & Generics
• Error Handling
• Multithreading

• asynchronous programming
  - async/await
  - tokio
  - futures

• cryptographic libraries
  - ring
  - rustls
  - libsodium

================================================================================================================================
                                            TODO:
================================================================================================================================

• Multithreading:
  - std::thread
  - Mutex
  - Atomic
  - Weak       <--- ' non-owning Weak pointer - to break cycles'
  - Once
  - OnceLock
  - LazyLock
  - RwLock
  - Arc
  - Barrier
  - Condvar
  - mpmc   (std::sync::mpmc::channel)
  - mpsc   (std::sync::mpsc::channel)


• Smart Pointers  # https://doc.rust-lang.org/book/ch15-00-smart-pointers.html



• Generics


   fn add<T>(i: Т, j: Т) -> Т 
   {
      i + j
   }

   # Фрагмент <Т: std: : ops: : Add<Output = Т>> предписывает, что в т должна быть реализация операции s td: : ops : : Add.

   fn add<T: std::ops::Add<Output = T>>(i: Т, j: Т) -> Т {
   {
      i + j
   }



================================================================================================================================
                                            Multithreading:  STUDY
================================================================================================================================


https://nuancesprog.ru/p/22996/



================================================================================================================================
                                            Generate Random Values
================================================================================================================================

https://rust-lang-nursery.github.io/rust-cookbook/algorithms/randomness.html

================================================================================================================================
                                            Parse command line arguments
================================================================================================================================

https://rust-lang-nursery.github.io/rust-cookbook/cli/arguments.html#parse-command-line-arguments

================================================================================================================================
                                            Concurrency
================================================================================================================================

https://rust-lang-nursery.github.io/rust-cookbook/concurrency.html

================================================================================================================================
                                            Cryptography
================================================================================================================================

https://rust-lang-nursery.github.io/rust-cookbook/cryptography.html

================================================================================================================================
                                            Database
================================================================================================================================

https://rust-lang-nursery.github.io/rust-cookbook/database.html

================================================================================================================================
                                            Web Programming
================================================================================================================================

https://rust-lang-nursery.github.io/rust-cookbook/web.html


================================================================================================================================
                                            Listen on unused port TCP/IP
================================================================================================================================




https://rust-lang-nursery.github.io/rust-cookbook/net/server.html#server