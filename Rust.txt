================================================================================================================================
                                            Cargo | Вопросы по инструментам и экосистеме
================================================================================================================================

::• Configuration" in the 'Cargo.toml' file
::• Проверка версии

   cargo --version

::• Create a new project

   cargo new hello_ca
   rgo
   cd hello_cargo


::• Что такое workspace в Cargo?
::  Позволяет управлять несколькими пакетами из одного репозитория.
::  Общий Cargo.lock, общие зависимости.

   [workspace]
   members = ["core", "cli", "utils"]


::• Check compilation without running:

   cargo check


::• Как посмотреть все зависимости проекта в виде дерева?

   cargo tree


::• Build and Run

   cargo build                  // debug сборка (не оптимизирована, включает debug symbols).
   cargo build --release        // оптимизированная сборка (по умолчанию -C opt-level=3).
   cargo run


::• Как собрать бинарник для другой платформы (cross-compilation)?

   rustup target add x86_64-unknown-linux-musl
   cargo build --target x86_64-unknown-linux-musl


::• Как запустить тесты?

   cargo test


::• Как запустить только один тест?

   cargo test test_addition


::• Как сгенерировать документацию?

   cargo doc --open


::• Что содержится в Cargo.toml

   [package]          - метаданные (имя, версия, автор).
   [dependencies]     - зависимости с их версиями.
   [dev-dependencies] - зависимости только для тестов.
   [features]         - включаемые функциональности.
   [profile]          - настройки оптимизации для debug/release.


::• Отличие Cargo.lock отличается от Cargo.toml:

   Cargo.toml - определяет, какие зависимости нужны (версии или диапазон).

   Cargo.lock - фиксирует точные версии зависимостей, которые были установлены для reproducible builds.
                Для библиотек Cargo.lock обычно не коммитят.


::• Профили сборки существуют в Cargo

   [profile.dev]     - для cargo build, без оптимизаций.

   [profile.release] - для cargo build --release, с оптимизациями.
                       ожно переопределять в Cargo.toml.


::• Добавить зависимость из Git или локальной папки

   [dependencies]
      mycrate = { git = "https://github.com/user/repo" }
      othercrate = { path = "../local/path" }


 ::• Как работать с feature flags в Cargo?

   1. Определить в Cargo.toml:

      [features]
      default = ["foo"]
      foo = []
      bar = []

   2. включать их:

      cargo build --features bar

   3. Или отключать default:

      cargo build --no-default-features --features bar




================================================================================================================================
                        Smart Pointers: # https://doc.rust-lang.org/book/ch15-00-smart-pointers.html
================================================================================================================================

• Box<T> 
• Rc<T>
• Arc<T>
• Cell<T> 
• RefCell<T>
• Cow<T>

• core::ptr::Unique
• core::ptr::Shared
• std::rc::Weak

================================================================================================================================
                        Multithreading:  # https://nuancesprog.ru/p/22996/
================================================================================================================================

• std::thread
• Mutex
• RwLockReadGuard
• Atomic
• Weak       <--- ' non-owning Weak pointer - to break cycles'
• Once
• OnceLock
• LazyLock
• RwLock
• Arc
• Barrier
• Condvar


пример с асинхронным tokio::sync::mpsc



Для MPMC (multiple producer, multiple consumer) обычно используют внешние библиотеки, самые популярные — это:

    crossbeam::channel — быстрый, без блокировки (внутри lock-free структуры).
    flume — удобный и богатый API.
    [tokio::sync::mpsc] — для async кода.




================================================================================================================================
                        Networking
================================================================================================================================

• async/await
• tokio
• futures

================================================================================================================================
                        Generics:
================================================================================================================================

fn add<T>(i: Т, j: Т) -> Т 
{
   i + j
}

# Фрагмент <Т: std: : ops: : Add<Output = Т>> предписывает, что в т должна быть реализация операции s td: : ops : : Add.

fn add<T: std::ops::Add<Output = T>>(i: Т, j: Т) -> Т {
{
   i + j
}


================================================================================================================================
                        cryptographic libraries:
================================================================================================================================

• ring
• rustls
• libsodium

================================================================================================================================
                                            Generate Random Values
================================================================================================================================

https://rust-lang-nursery.github.io/rust-cookbook/algorithms/randomness.html

================================================================================================================================
                                            Parse command line arguments
================================================================================================================================

https://rust-lang-nursery.github.io/rust-cookbook/cli/arguments.html#parse-command-line-arguments

================================================================================================================================
                                            Concurrency
================================================================================================================================

https://rust-lang-nursery.github.io/rust-cookbook/concurrency.html

================================================================================================================================
                                            Cryptography
================================================================================================================================

https://rust-lang-nursery.github.io/rust-cookbook/cryptography.html

================================================================================================================================
                                            Database
================================================================================================================================

https://rust-lang-nursery.github.io/rust-cookbook/database.html

================================================================================================================================
                                            Web Programming
================================================================================================================================

https://rust-lang-nursery.github.io/rust-cookbook/web.html


================================================================================================================================
                                            Listen on unused port TCP/IP
================================================================================================================================




https://rust-lang-nursery.github.io/rust-cookbook/net/server.html#server




================================================================================================================================
                                            DPDK - Repo - ИЗУЧИТЬ
================================================================================================================================


https://github.com/Dmdv/dpdk_port




================================================================================================================================
                                            Questions: (answers)
================================================================================================================================

• RC vs ARC
• Provide an example of an impl block in Rust   
• How do you create an infinite loop in Rust
• How can you mutate variables in Rust?
• What happens to borrowed data at the end of a Rust function
• What's the difference between .unwrap() and .expect() in Rust?
• Why is the return keyword in Rust optional? Provide examples
• What is an example of a match expression in Rust?
• how to assign the result of a Rust match expression to a variable binding?
• Printing information to the terminal

• Can you create more than one variable using one line of Rust code?
• What is a Rust trait
• how continue an outer loop from an inner loop in Rust


//--------------------------------------------------------------------------

• RC vs ARC

   The only difference between Rc and Arc is that Arc uses atomic operations when it updates the reference counts, and Rc does not. 
   They occupy the same amount of memory.

   Rc is !Send/!Sync so compiler won't let you share it.


• Provide an example of an impl block in Rust   

   struct Number(i32);

   impl Number {
       pub fn new(n: i32) -> Self {
           Self(n)
       }
   }

   let five = Number::new(5);


• How do you create an infinite loop in Rust

   loop {
       // ...
   }


• How can you mutate variables in Rust?

   By default, all data in Rust is immutable and cannot get changed without being marked as mutable.
   Using the mut keyword changes this behavior and allows changing (mutating) the data:   

   let mut a = 0;  // mutable
   let b = 0;      // immutable


• What happens to borrowed data at the end of a Rust function?  [ https://doc.rust-lang.org/rust-by-example/scope/borrow.html ]

   When writing a function that borrows data, the borrowed data will remain available for use after the function ends. 
   This is because ownership of the data does not transfer when borrowed.

   Most of the time, we'd like to access data without taking ownership over it.
   To accomplish this, Rust uses a borrowing mechanism. Instead of passing objects by value (T), objects can be passed by reference (&T).

   The compiler statically guarantees (via its borrow checker) that references always point to valid objects.
   That is, while references to an object exist, the object cannot be destroyed.


• What's the difference between .unwrap() and .expect() in Rust?

   Both .unwrap() and .expect() will trigger a panic if they execute.
   ->  .unwrap() triggers a thread panic and then displays the line number containing the call to .unwrap().
   ->  .expect() triggers a thread panic with a customized message, and then displays the line number containing the call to .expect().

• Why is the return keyword in Rust optional? Provide examples

   fn one() -> u32 {             |     fn two() -> u32 {
       1                         |        return 2;
   }                             |     }

   The return keyword is for returning early from a function  - if there isn't a need to return early, then the omitting return keyword is appropriate.


• What is an example of a match expression in Rust?   

   This Rust match expression matches an Option.
   When the Option contains Some, the data gets printed to the terminal.
   When the Option contains None, the message there is no number gets printed to the terminal.

   let foo = Some(1);
   match foo {
       Some(n) => println!("number is {n}"),
       None => println!("there is no number"),
   }

• how to assign the result of a Rust match expression to a variable binding?

   let t = true;
   let one = match t {
       true => 1,
       false => 0,
   };   


• Printing information to the terminal
                                                      
                                                     let life = 42;
   println!("hello world");                          dbg!(life);


• Can you create more than one variable using one line of Rust code?
   
   let (a, b) = (1, 2);


• What is a Rust trait

   pub trait Summary {                                     pub struct NewsArticle {
       fn summarize(&self) -> String;                          pub headline: String,
   }                                                           pub location: author,  
                                                           }
                     impl Summary for NewsArticle {
                        fn summarize(&self) -> String {
                           format!("{}, by {} ({})", self.headline, self.author)
                     }


• How can you borrow data in a Rust structure

   // Using borrowed data within a Rust structure requires the use of lifetime annotations.
   // Lifetime annotations tell the compiler that we are borrowing some data from another part of the program:

   // In the above example, the Name structure borrows a &str
   // The lifetime of the &str is 'a
   // Seeing a lifetime in a struct informs developers that some data needs to already exist before creating the structure.

   #[derive(Debug)]
   struct Name<'a> {                         let name = String::from("Bob");
      name: &'a str,                         let n = Name { name: &name };  
   }



• How  continue an outer loop from an inner loop in Rust

   // Rust support continuing an outer loop when executing an inner loop through the use of loop labels:
   // Using loop labels with the break keyword instead of continue will enable an inner loop to exit both an inner and outer loop.

   let mut a = 0;
   'outer: loop {
       a += 1;

       let mut b = 0;
       loop {
           if b == 3 {
               continue 'outer;
           }
           b += 1;
       }
   }


• The question mark operator in Rust offers a convenient way to handle errors or missing data.

   When used with 
   Result, the question mark operator will |  Option, the question mark operator will                                                
                                           |
      unwrap an Ok   or return an Err      |     unwrap a Some   or return a None

   // Because the question mark operator potentially returns values, the function signature must have either Result or Option set as the return type.   



================================================================================================================================
                             Маленькие каверзные задачи (для собеса)
================================================================================================================================

            fn main() {
                let mut s = String::from("hello");
                let r1 = &s;
                let r2 = &mut s;
                println!("{}, {}", r1, r2);
            }


✅ Ответ:  Выведет hello, hello. Можно брать несколько immutable ссылок одновременно.


            fn main() {
                let mut s = String::from("hello");
                let r1 = &s;
                let r2 = &mut s;
                println!("{}, {}", r1, r2);
            }


✅ Ответ: Не скомпилируется. Нельзя иметь immutable и mutable ссылку одновременно.